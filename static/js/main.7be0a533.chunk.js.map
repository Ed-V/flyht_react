{"version":3,"sources":["utils/AxiosWrap.js","hoc/Auxiliary.js","components/DisplayList/StudentCard/StudentCard.js","components/UpdateModal/UpdateModal.js","components/DisplayList/Displaylist.js","components/StudentManager/StudentManager.js","stores/StudentStores.js","App.js","serviceWorker.js","index.js","components/DisplayList/DisplayListStyles.module.css"],"names":["Axios","defaults","baseURL","headers","common","aux","props","children","studentCard","handleShowUpdate","showUpdateModal","cid","handleDelete","id","type","data","events","isActive","for","alwaysRender","style","x","y","isDragging","position","left","top","zIndex","Body","Title","firstName","lastName","Text","fontWeight","studentId","phone","variant","onClick","updateModal","show","onHide","hideHandler","Header","closeButton","title","InputGroup","className","Prepend","FormControl","placeholder","aria-label","aria-describedby","value","onChange","handleChange","name","Form","Group","controlId","Label","Control","as","status","Footer","commitActionHandler","buttonText","DisplayList","inject","observer","handleInputChange","target","checked","setState","handleSaveChange","updateStudent","state","updateDbId","updateStatus","FirstName","updateFirstName","LastName","updateLastName","StudentId","updateStudentId","Phone","updatePhone","handleHideUpdateModel","handleShowUpdateModel","userId","student","StudentStore","_id","handleShowCreateModel","showCreateModal","handleHideCreateModel","handleCreate","createStudent","handleCardDropActive","handleCardDropDel","handleCardDropDropped","deleteStudent","showCreateModel","UpdateModal","this","accepts","onDrop","DragState","styles","dropZone","activeStudents","map","StudentCard","key","delStudents","dropStudents","limit","handleLimitChange","onKeyPress","handleLimitEnter","React","Component","StudentManager","a","setStateAsync","event","fetchStudents","selectedPage","loadingMessage","reactThis","put","then","response","catch","error","errorMessage","console","log","post","students","length","addStudent","delete","selectPage","get","params","max","skip","studentTotal","totals","resetStudents","setStudents","calcPaginationPages","pageCount","total","paginationClickHandler","selected","initialPage","Promise","resolve","result","Math","ceil","Heading","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","forcePage","containerClassName","activeClassName","pageClassName","pageLinkClassName","previousLinkClassName","nextLinkClassName","onPageChange","store","action","bound","computedFn","find","splice","push","toUpdate","filter","observable","computed","Root","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.7be0a533.chunk.js","sourcesContent":["import Axios from 'axios'\r\n\r\nAxios.defaults.baseURL = \"https://flyht-354b.restdb.io/rest/\";\r\nAxios.defaults.headers.common['x-apikey'] = \"5d7fa78ffd86cb75861e2350\";\r\n\r\nexport default Axios;","/**\r\n * This class acts as an Aux for wrapping html elements in react as a div alternative\r\n * @param {*} props - Properties passed in \r\n */\r\nconst aux = (props) => props.children;\r\n\r\nexport default aux;","import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { Draggable, DragComponent } from \"react-dragtastic\";\r\nimport Aux from \"../../../hoc/Auxiliary\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nconst studentCard = props => {\r\n\r\n\r\nconst handleShowUpdate = () => {\r\n    props.showUpdateModal(props.cid)\r\n}\r\n\r\nconst handleDelete = () => {\r\n    props.handleDelete(props.cid);\r\n}\r\n\r\n  return (\r\n    <Aux>\r\n      <Draggable id={props.cid} type=\"card\" data={props.cid}>\r\n        {({ events, isActive }) => (\r\n          <DragComponent\r\n            for={props.cid}\r\n            alwaysRender\r\n            style=\"pointer-events: none\"\r\n          >\r\n            {({ x, y, isDragging }) => (\r\n              <Card\r\n                {...events}\r\n                style={{\r\n                  position: isDragging && isActive ? \"fixed\" : \"\",\r\n                  left: isDragging && isActive ? x : \"\",\r\n                  top: isDragging && isActive ? y : \"\",\r\n                  zIndex: isDragging && isActive ? 999 : \"auto\"\r\n                }}\r\n              >\r\n                <Card.Body>\r\n                  <Card.Title>\r\n                    {props.firstName} {props.lastName}\r\n                  </Card.Title>\r\n                  <Card.Text>\r\n                    <span style={{ fontWeight: \"bold\" }}>Student Id:</span>\r\n                    <br />\r\n                    {props.studentId}\r\n                    <br />\r\n                    <span style={{ fontWeight: \"bold\" }}>Phone:</span>\r\n                    <br />\r\n                    {props.phone}\r\n                  </Card.Text>\r\n                  <Button variant=\"success\" onClick={handleShowUpdate}>Edit</Button>\r\n                  <Button variant=\"danger\" onClick={handleDelete}>Delete</Button>\r\n                </Card.Body>\r\n              </Card>\r\n            )}\r\n          </DragComponent>\r\n        )}\r\n      </Draggable>\r\n    </Aux>\r\n  );\r\n};\r\n\r\nexport default studentCard;\r\n","import React from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { InputGroup, FormControl, Form } from \"react-bootstrap\";\r\n\r\nconst updateModal = props => {\r\n  return (\r\n    <Modal show={props.show} onHide={props.hideHandler}>\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{props.title}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <div>\r\n          <InputGroup className=\"mb-3\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"firstName\">First Name</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <FormControl\r\n              placeholder=\"First name\"\r\n              aria-label=\"FirstName\"\r\n              aria-describedby=\"firstName\"\r\n              value={props.firstName}\r\n              onChange={props.handleChange}\r\n              name=\"updateFirstName\"\r\n            />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"mb-3\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"lastName\">Last Name</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <FormControl\r\n              placeholder=\"Last name\"\r\n              aria-label=\"Last name\"\r\n              aria-describedby=\"lastName\"\r\n              value={props.lastName}\r\n              onChange={props.handleChange}\r\n              name=\"updateLastName\"\r\n            />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"mb-3\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"studentId\">Student Id</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <FormControl\r\n              placeholder=\"Student Id\"\r\n              aria-label=\"Student Id\"\r\n              aria-describedby=\"studentId\"\r\n              value={props.studentId}\r\n              onChange={props.handleChange}\r\n              name=\"updateStudentId\"\r\n            />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"mb-3\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"phone\">Phone</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <FormControl\r\n              placeholder=\"Phone\"\r\n              aria-label=\"Phone\"\r\n              aria-describedby=\"phone\"\r\n              value={props.phone}\r\n              onChange={props.handleChange}\r\n              name=\"updatePhone\"\r\n            />\r\n          </InputGroup>\r\n\r\n          <Form.Group controlId=\"status\">\r\n            <Form.Label>Status</Form.Label>\r\n            <Form.Control\r\n              as=\"select\"\r\n              name=\"updateStatus\"\r\n              value={props.status}\r\n              onChange={props.handleChange}\r\n            >\r\n              <option value=\"active\">active</option>\r\n              <option value=\"delinquent\">delinquent</option>\r\n              <option value=\"dropped\">dropped</option>\r\n            </Form.Control>\r\n          </Form.Group>\r\n        </div>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={props.hideHandler}>\r\n          Close\r\n        </Button>\r\n        <Button variant=\"primary\" onClick={props.commitActionHandler}>{props.buttonText}</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default updateModal;\r\n","import React from \"react\";\r\nimport { DragState, Droppable } from \"react-dragtastic\";\r\nimport StudentCard from \"./StudentCard/StudentCard\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Aux from \"../../hoc/Auxiliary\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport styles from \"./DisplayListStyles.module.css\";\r\nimport UpdateModal from \"../UpdateModal/UpdateModal\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\n\r\n@inject(\"StudentStore\")\r\n@observer\r\nclass DisplayList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      showUpdateModal: false,\r\n      showCreateModel: false,\r\n      updateFirstName: \"\",\r\n      updateLastName: \"\",\r\n      updateStudentId: 0,\r\n      updatePhone: 0,\r\n      updateStatus: \"active\",\r\n      updateDbId: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  handleInputChange = ({ target }) => {\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n    this.setState({\r\n      [target.name]: value\r\n    });\r\n  };\r\n\r\n  handleSaveChange = () => {\r\n    this.props.updateStudent(this.state.updateDbId, {\r\n      status: this.state.updateStatus,\r\n      FirstName: this.state.updateFirstName,\r\n      LastName: this.state.updateLastName,\r\n      StudentId: this.state.updateStudentId,\r\n      Phone: this.state.updatePhone\r\n    });\r\n    this.handleHideUpdateModel();\r\n  };\r\n\r\n  handleShowUpdateModel = userId => {\r\n    let student = this.props.StudentStore.student(userId);\r\n    this.setState({\r\n      updateFirstName: student.FirstName,\r\n      updateLastName: student.LastName,\r\n      updateStudentId: student.StudentId,\r\n      updatePhone: student.Phone,\r\n      updateStatus: student.status,\r\n      updateDbId: student._id\r\n    });\r\n\r\n    this.setState({ showUpdateModal: true });\r\n  };\r\n\r\n  handleHideUpdateModel = () => {\r\n    this.setState({ showUpdateModal: false });\r\n    this.setState({\r\n      updateFirstName: \"\",\r\n      updateLastName: \"\",\r\n      updateStudentId: 0,\r\n      updatePhone: 0,\r\n      updateStatus: \"active\",\r\n      updateDbId: \"\"\r\n    });\r\n  };\r\n\r\n  handleShowCreateModel = userId => {\r\n    this.setState({ showCreateModal: true });\r\n  };\r\n\r\n  handleHideCreateModel = () => {\r\n    this.setState({ showCreateModal: false });\r\n    this.setState({\r\n      updateFirstName: \"\",\r\n      updateLastName: \"\",\r\n      updateStudentId: 0,\r\n      updatePhone: 0,\r\n      updateStatus: \"active\",\r\n      updateDbId: \"\"\r\n    });\r\n  };\r\n\r\n  handleCreate = () => {\r\n    this.props.createStudent({\r\n      status: this.state.updateStatus,\r\n      FirstName: this.state.updateFirstName,\r\n      LastName: this.state.updateLastName,\r\n      StudentId: this.state.updateStudentId,\r\n      Phone: this.state.updatePhone\r\n    });\r\n    this.handleHideCreateModel();\r\n  };\r\n\r\n  handleCardDropActive = data => {\r\n    this.props.updateStudent(data, { status: \"active\" });\r\n  };\r\n\r\n  handleCardDropDel = data => {\r\n    this.props.updateStudent(data, { status: \"delinquent\" });\r\n  };\r\n\r\n  handleCardDropDropped = data => {\r\n    this.props.updateStudent(data, { status: \"dropped\" });\r\n  };\r\n\r\n handleDelete = studentId => {\r\n     this.props.deleteStudent(studentId);\r\n }\r\n\r\n  render() {\r\n    return (\r\n      <Aux>\r\n        <UpdateModal\r\n          show={this.state.showUpdateModal}\r\n          hideHandler={this.handleHideUpdateModel}\r\n          title=\"Update Student\"\r\n          buttonText=\"Save Changes\"\r\n          firstName={this.state.updateFirstName}\r\n          lastName={this.state.updateLastName}\r\n          studentId={this.state.updateStudentId}\r\n          phone={this.state.updatePhone}\r\n          handleChange={this.handleInputChange}\r\n          status={this.state.updateStatus}\r\n          commitActionHandler={this.handleSaveChange}\r\n        ></UpdateModal>\r\n        <UpdateModal\r\n          show={this.state.showCreateModal}\r\n          hideHandler={this.handleHideCreateModel}\r\n          title=\"Create Student\"\r\n          buttonText=\"Create Student\"\r\n          firstName={this.state.updateFirstName}\r\n          lastName={this.state.updateLastName}\r\n          studentId={this.state.updateStudentId}\r\n          phone={this.state.updatePhone}\r\n          handleChange={this.handleInputChange}\r\n          status={this.state.updateStatus}\r\n          commitActionHandler={this.handleCreate}\r\n        ></UpdateModal>\r\n        <Row>\r\n          <Col>\r\n            <Droppable accepts=\"card\" onDrop={this.handleCardDropActive}>\r\n              {DragState => (\r\n                <div {...DragState.events} className={styles.dropZone}>\r\n                  <h1>Active</h1>\r\n                  <p>Drop card here</p>\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n            {this.props.StudentStore.activeStudents.map(student => {\r\n              return (\r\n                <StudentCard\r\n                  cid={student._id}\r\n                  key={student._id}\r\n                  firstName={student.FirstName}\r\n                  lastName={student.LastName}\r\n                  studentId={student.StudentId}\r\n                  phone={student.Phone}\r\n                  showUpdateModal={this.handleShowUpdateModel}\r\n                  handleDelete={this.handleDelete}\r\n                ></StudentCard>\r\n              );\r\n            })}\r\n          </Col>\r\n          <Col>\r\n            <Droppable accepts=\"card\" onDrop={this.handleCardDropDel}>\r\n              {DragState => (\r\n                <div {...DragState.events} className={styles.dropZone}>\r\n                  <h1>Delinquent</h1>\r\n                  <p>Drop card here</p>\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n            {this.props.StudentStore.delStudents.map(student => {\r\n              return (\r\n                <StudentCard\r\n                  cid={student._id}\r\n                  key={student._id}\r\n                  firstName={student.FirstName}\r\n                  lastName={student.LastName}\r\n                  studentId={student.StudentId}\r\n                  phone={student.Phone}\r\n                  showUpdateModal={this.handleShowUpdateModel}\r\n                  handleDelete={this.handleDelete}\r\n                ></StudentCard>\r\n              );\r\n            })}\r\n          </Col>\r\n          <Col>\r\n            <Droppable accepts=\"card\" onDrop={this.handleCardDropDropped}>\r\n              {DragState => (\r\n                <div {...DragState.events} className={styles.dropZone}>\r\n                  <h1>Dropped</h1>\r\n                  <p>Drop card here</p>\r\n                </div>\r\n              )}\r\n            </Droppable>\r\n            {this.props.StudentStore.dropStudents.map(student => {\r\n              return (\r\n                <StudentCard\r\n                  cid={student._id}\r\n                  key={student._id}\r\n                  firstName={student.FirstName}\r\n                  lastName={student.LastName}\r\n                  studentId={student.StudentId}\r\n                  phone={student.Phone}\r\n                  showUpdateModal={this.handleShowUpdateModel}\r\n                  handleDelete={this.handleDelete}\r\n                ></StudentCard>\r\n              );\r\n            })}\r\n          </Col>\r\n        </Row>\r\n        <InputGroup className=\"mb-3\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text id=\"studentLimit\">Limit(Press Enter)</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <FormControl\r\n              placeholder=\"limit\"\r\n              aria-label=\"limit\"\r\n              aria-describedby=\"limit\"\r\n              value={this.props.limit}\r\n              onChange={this.props.handleLimitChange}\r\n              onKeyPress={this.props.handleLimitEnter}\r\n              name=\"limit\"\r\n            />\r\n          </InputGroup>\r\n        <Button onClick={this.handleShowCreateModel}>Create Student</Button>\r\n      </Aux>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DisplayList;\r\n","import React from \"react\";\r\nimport Axios from \"../../utils/AxiosWrap\";\r\nimport Pagination from \"react-paginate\";\r\nimport DisplayList from \"../DisplayList/Displaylist\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport { inject, observer } from \"mobx-react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\n\r\n@inject(\"StudentStore\")\r\n@observer\r\nclass StudentManager extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      studentTotal: 0,\r\n      limit: 10,\r\n      pageCount: 1,\r\n      selectedPage: 0,\r\n      initialPage: 0,\r\n      loadingMessage: false,\r\n      errorMessage: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.fetchStudents(this.state.initialPage);\r\n  }\r\n\r\n  setStateAsync(state) {\r\n    return new Promise(resolve => {\r\n      this.setState(state, resolve);\r\n    });\r\n  }\r\n\r\n  handleLimitChange = async ({ target }) => {\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n    await this.setStateAsync({\r\n      limit: value\r\n    });\r\n  };\r\n\r\n  handleLimitEnter = (event) => {\r\n    if(event.key === 'Enter'){\r\n        this.fetchStudents(this.state.selectedPage);\r\n      }\r\n\r\n  }\r\n\r\n  async calcPaginationPages() {\r\n    let result = Math.ceil(this.state.studentTotal / this.state.limit);\r\n\r\n    if (result === 0) {\r\n      result = 1;\r\n    }\r\n\r\n    await this.setStateAsync({ pageCount: result });\r\n  }\r\n\r\n  updateStudent = (id, value) => {\r\n    this.setState({ loadingMessage: true });\r\n    let reactThis = this;\r\n    Axios.put(\"students/\" + id, value)\r\n      .then(response => {\r\n        reactThis.props.StudentStore.updateStudent(id, response.data);\r\n        this.setState({ loadingMessage: false });\r\n      })\r\n      .catch(error => {\r\n        this.setState({ errorMessage: true });\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  createStudent = value => {\r\n    this.setState({ loadingMessage: true });\r\n    let reactThis = this;\r\n    Axios.post(\"students\", value)\r\n      .then(response => {\r\n        if (this.props.StudentStore.students.length < 10) {\r\n          reactThis.props.StudentStore.addStudent(response.data);\r\n        }\r\n        this.setState({ loadingMessage: false });\r\n      })\r\n      .catch(error => {\r\n        this.setState({ errorMessage: true });\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  deleteStudent = id => {\r\n    this.setState({ loadingMessage: true });\r\n    Axios.delete(\"students/\" + id)\r\n      .then(response => {\r\n        this.fetchStudents();\r\n        this.setState({ loadingMessage: false });\r\n      })\r\n      .catch(error => {\r\n        this.setState({ errorMessage: true });\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  fetchStudents = (selectPage) => {\r\n     this.setState({ loadingMessage: true });\r\n    Axios.get(\"students\", {\r\n      params: {\r\n        max: this.state.limit,\r\n        skip: (this.state.limit * selectPage) > this.state.studentTotal ? 0 : (this.state.limit * selectPage),\r\n        totals: true\r\n      }\r\n    })\r\n      .then(async (response) => {\r\n        this.props.StudentStore.resetStudents();\r\n        this.props.StudentStore.setStudents(response.data.data);\r\n        this.calcPaginationPages();\r\n        console.log(selectPage);\r\n\r\n\r\n          if (this.state.pageCount < this.state.selectedPage) {\r\n            await this.setStateAsync({ selectedPage: 0});\r\n          } else {\r\n            await this.setStateAsync({ selectedPage: selectPage });\r\n          }\r\n\r\n\r\n        await this.setState({ studentTotal: response.data.totals.total });\r\n        this.setState({ loadingMessage: false });\r\n      })\r\n      .catch(error => {\r\n        this.setState({ errorMessage: true });\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  paginationClickHandler = event => {\r\n    this.fetchStudents(event.selected);\r\n  };\r\n\r\n  render() {\r\n    const { StudentStore } = this.props;\r\n\r\n    return (\r\n      <Container>\r\n        <Alert variant=\"primary\" show={this.state.loadingMessage}>\r\n          <Alert.Heading>Communicating...</Alert.Heading>\r\n          <p>Communicating with server, please be patient.....</p>\r\n        </Alert>\r\n        <Alert variant=\"danger\" show={this.state.errorMessage}>\r\n          <Alert.Heading>Something Bad Happened</Alert.Heading>\r\n          <p>Please contact IT for more information</p>\r\n        </Alert>\r\n        <DisplayList\r\n          updateStudent={this.updateStudent}\r\n          createStudent={this.createStudent}\r\n          deleteStudent={this.deleteStudent}\r\n          limit={this.state.limit}\r\n          handleLimitChange={this.handleLimitChange}\r\n          handleLimitEnter = {this.handleLimitEnter}\r\n        ></DisplayList>\r\n        <nav className=\"page\">\r\n          <Pagination\r\n            previousLabel={\"Previous\"}\r\n            nextLabel={\"Next\"}\r\n            breakLabel={\"...\"}\r\n            breakClassName={\"break-me\"}\r\n            pageCount={this.state.pageCount}\r\n            marginPagesDisplayed={2}\r\n            pageRangeDisplayed={5}\r\n            forcePage={this.state.selectedPage}\r\n            containerClassName={\"pagination justify-content-center\"}\r\n            activeClassName={\"active\"}\r\n            pageClassName={\"page-item\"}\r\n            pageLinkClassName={\"page-link\"}\r\n            previousLinkClassName={\"page-link\"}\r\n            nextLinkClassName={\"page-link\"}\r\n            initialPage={this.state.initialPage}\r\n            onPageChange={this.paginationClickHandler}\r\n          ></Pagination>\r\n        </nav>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StudentManager;\r\n","import { observable, computed, action } from \"mobx\";\r\nimport { computedFn } from \"mobx-utils\";\r\n\r\nclass StudentStore {\r\n  @observable students = [];\r\n\r\n@action.bound\r\nresetStudents(){\r\n    this.students.splice(0, this.students.length);\r\n}\r\n\r\n  @action.bound\r\n  setStudents(value) {\r\n    this.students = value;\r\n  }\r\n\r\n  @action.bound\r\n  setStudentStatus(id, value) {\r\n    this.students.find(function(student) {\r\n      return student._id === id;\r\n    }).status = value;\r\n  }\r\n\r\n  @action.bound\r\n  addStudent(value) {\r\n    this.students.push({\r\n      StudentId: value.StudentId,\r\n      FirstName: value.FirstName,\r\n      LastName: value.LastName,\r\n      Phone: value.Phone,\r\n      status: value.status,\r\n      _id : value._id\r\n    });\r\n  }\r\n\r\n  @action.bound\r\n  updateStudent(id, value) {\r\n    let toUpdate = this.students.find(function(student) {\r\n      return student._id === id;\r\n    });\r\n\r\n    toUpdate.StudentId = value.StudentId;\r\n    toUpdate.FirstName = value.FirstName;\r\n    toUpdate.LastName = value.LastName;\r\n    toUpdate.Phone = value.Phone;\r\n    toUpdate.status = value.status;\r\n  }\r\n\r\n  student = computedFn(function getStudent(id) {\r\n    return this.students.find(function(student) {\r\n      return student._id === id;\r\n    });\r\n  });\r\n\r\n  @computed get activeStudents() {\r\n    let activeStudents = this.students.filter(function(student) {\r\n      return student.status === \"active\";\r\n    });\r\n    return activeStudents;\r\n  }\r\n\r\n  @computed get delStudents() {\r\n    let delStudents = this.students.filter(function(student) {\r\n      return student.status === \"delinquent\";\r\n    });\r\n\r\n    return delStudents;\r\n  }\r\n\r\n  @computed get dropStudents() {\r\n    let dropStudents = this.students.filter(function(student) {\r\n      return student.status === \"dropped\";\r\n    });\r\n\r\n    return dropStudents;\r\n  }\r\n}\r\n\r\nconst store = new StudentStore();\r\nexport default store;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport StudentManager from \"./components/StudentManager/StudentManager\";\r\nimport { Provider } from \"mobx-react\";\r\nimport StudentStore from './stores/StudentStores'\r\n\r\nconst Root = (\r\n  <Provider StudentStore={StudentStore}>\r\n    <div className=\"App\">\r\n      <StudentManager></StudentManager>\r\n    </div>\r\n  </Provider>\r\n);\r\n\r\nfunction App() {\r\n  return Root;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dropZone\":\"DisplayListStyles_dropZone__Nd4fv\"};"],"sourceRoot":""}